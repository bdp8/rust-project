use clap::{Arg, App};
use clap::ArgMatches;


pub fn get_input_info() -> ArgMatches
{
	return App::new("Rust Photo Editor")
        .version("0.1.0")
        .author("Bogomila Petrova")
        .about("Image Proccessing")
		.arg(Arg::new("input")
				  .long("input")
				  .short('i')
				  .takes_value(true)
				  .about("Takes the full file name of an existing photo")
	              .required(true))
		.arg(Arg::new("output")
				  .long("output")
				  .short('o')
				  .takes_value(true)
				  .about("Takes the prefarable name of the output file. If not given any name, it will take 'output.jpeg'"))
        .arg(Arg::new("crop")
				  .short('c')
				  .long("crop")
				  .takes_value(true)
				  .min_values(4)
                  .about("Crops an image. The first and the second arguments are the coordinates of the starting point from witch the photo will be cropped and the third and fourth arguments are the sizes of the new photo."))
		.arg(Arg::new("grayscale")
				  .short('g')
				  .long("grayscale")
				  .takes_value(false)
				  .about("Turns the given photo to grayscale."))
		.arg(Arg::new("invert")
				  .short('n')
				  .long("invert")
				  .takes_value(false)
				  .about("Returns a photo of the negative colors of the input photo."))
		.arg(Arg::new("sharpen")
				  .short('s')
				  .long("sharpen")
				  .takes_value(false)
				  .about("Sharpens the input photo by given strength."))
		.arg(Arg::new("blur")
				  .short('b')
				  .long("blur")
				  .takes_value(true)
				  .about("Blurres the input photo."))
		.arg(Arg::new("brightness")
					.allow_hyphen_values(true)
					.long("brightness")
					.takes_value(true)
				  .about("Adjusts the brightness of the input photo by the given value. Negative values decrease the brightness and positive values increase it."))
		.arg(Arg::new("contrast")
                  .allow_hyphen_values(true)
				  .takes_value(true)
				  .long("contrast")
				  .about("Adjusts the contrast of the input photo by the given value. Negative values decrease the brightness and positive values increase it."))
	    .arg(Arg::new("adjust-r")
				  .takes_value(true)
                  .allow_hyphen_values(true)
				  .long("adjust-r")
				  .about("Adjusts the red color of the input photo by the given percentage."))
		.arg(Arg::new("adjust-g")
				  .takes_value(true)
                  .allow_hyphen_values(true)
				  .long("adjust-g")
				  .about("Adjusts the green color of the input photo by the given percentage."))
		.arg(Arg::new("adjust-b")
				  .long("adjust-b")
                  .allow_hyphen_values(true)
				  .takes_value(true)
				  .about("Adjusts the blue color of the input photo by the given percentage."))
		.arg(Arg::new("sobel")
				  .takes_value(false)
  				  .long("sobel")
				  .about("Line detection with Sobel algorithm."))
		.arg(Arg::new("rotate-left")
				  .long("rotate-left")
				  .takes_value(false)
				  .about("Rotates the input photo by 90 degrees left."))
		.arg(Arg::new("rotate-right")
				  .long("rotate-right")
				  .takes_value(false)
				  .about("Rotates the input photo by 90 degrees right."))
		.arg(Arg::new("thumbnail")
				  .short('t')
  				  .long("thumbnail")
				  .takes_value(true)
				  .min_values(2)
                  .about("Makes a thumbnail of a photo. Takes as values the sizes of the new photo."))
        .get_matches();

}